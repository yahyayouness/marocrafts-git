CONFLICT PLEASE GIT-BISECT(1)                     Git Manual                     GIT-BISECT(1) 



NNAAMMEE
       git-bisect - Use binary search to find the commit that introduced a bug

SSYYNNOOPPSSIISS
       _g_i_t _b_i_s_e_c_t <subcommand> <options>


DDEESSCCRRIIPPTTIIOONN
       The command takes various subcommands, and different options depending
       on the subcommand:

           git bisect start [--term-{old,good}=<term> --term-{new,bad}=<term>]
                            [--no-checkout] [<bad> [<good>...]] [--] [<paths>...]
           git bisect (bad|new|<term-new>) [<rev>]
           git bisect (good|old|<term-old>) [<rev>...]
           git bisect terms [--term-good | --term-bad]
           git bisect skip [(<rev>|<range>)...]
           git bisect reset [<commit>]
           git bisect (visualize|view)
           git bisect replay <logfile>
           git bisect log
           git bisect run <cmd>...
           git bisect help

       This command uses a binary search algorithm to find which commit in
       your project's history introduced a bug. You use it by first telling it
       a "bad" commit that is known to contain the bug, and a "good" commit
       that is known to be before the bug was introduced. Then ggiitt bbiisseecctt
       picks a commit between those two endpoints and asks you whether the
       selected commit is "good" or "bad". It continues narrowing down the
       range until it finds the exact commit that introduced the change.

       In fact, ggiitt bbiisseecctt can be used to find the commit that changed aannyy
       property of your project; e.g., the commit that fixed a bug, or the
       commit that caused a benchmark's performance to improve. To support
       this more general usage, the terms "old" and "new" can be used in place
       of "good" and "bad", or you can choose your own terms. See section
       "Alternate terms" below for more information.

   BBaassiicc bbiisseecctt ccoommmmaannddss:: ssttaarrtt,, bbaadd,, ggoooodd
       As an example, suppose you are trying to find the commit that broke a
       feature that was known to work in version vv22..66..1133--rrcc22 of your project.
       You start a bisect session as follows:

           $ git bisect start
           $ git bisect bad                 # Current version is bad
           $ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good


       Once you have specified at least one bad and one good commit, ggiitt
       bbiisseecctt selects a commit in the middle of that range of history, checks
       it out, and outputs something similar to the following:

           Bisecting: 675 revisions left to test after this (roughly 10 steps)


       You should now compile the checked-out version and test it. If that
       version works correctly, type

           $ git bisect good


       If that version is broken, type

           $ git bisect bad


       Then ggiitt bbiisseecctt will respond with something like

           Bisecting: 337 revisions left to test after this (roughly 9 steps)


       Keep repeating the process: compile the tree, test it, and depending on
       whether it is good or bad run ggiitt bbiisseecctt ggoooodd or ggiitt bbiisseecctt bbaadd to ask
       for the next commit that needs testing.

       Eventually there will be no more revisions left to inspect, and the
       command will print out a description of the first bad commit. The
       reference rreeffss//bbiisseecctt//bbaadd will be left pointing at that commit.

   BBiisseecctt rreesseett
       After a bisect session, to clean up the bisection state and return to
       the original HEAD, issue the following command:

           $ git bisect reset


       By default, this will return your tree to the commit that was checked
       out before ggiitt bbiisseecctt ssttaarrtt. (A new ggiitt bbiisseecctt ssttaarrtt will also do that,
       as it cleans up the old bisection state.)

       With an optional argument, you can return to a different commit
       instead:

           $ git bisect reset <commit>


       For example, ggiitt bbiisseecctt rreesseett bbiisseecctt//bbaadd will check out the first bad
       revision, while ggiitt bbiisseecctt rreesseett HHEEAADD will leave you on the current
       bisection commit and avoid switching commits at all.

   AAlltteerrnnaattee tteerrmmss
       Sometimes you are not looking for the commit that introduced a
       breakage, but rather for a commit that caused a change between some
       other "old" state and "new" state. For example, you might be looking
       for the commit that introduced a particular fix. Or you might be
       looking for the first commit in which the source-code filenames were
       finally all converted to your company's naming standard. Or whatever.

       In such cases it can be very confusing to use the terms "good" and
       "bad" to refer to "the state before the change" and "the state after
       the change". So instead, you can use the terms "old" and "new",
       respectively, in place of "good" and "bad". (But note that you cannot
       mix "good" and "bad" with "old" and "new" in a single session.)

       In this more general usage, you provide ggiitt bbiisseecctt with a "new" commit
       that has some property and an "old" commit that doesn't have that
       property. Each time ggiitt bbiisseecctt checks out a commit, you test if that
       commit has the property. If it does, mark the commit as "new";
       otherwise, mark it as "old". When the bisection is done, ggiitt bbiisseecctt
       will report which commit introduced the property.

       To use "old" and "new" instead of "good" and bad, you must run ggiitt
       bbiisseecctt ssttaarrtt without commits as argument and then run the following
       commands to add the commits:

           git bisect old [<rev>]


       to indicate that a commit was before the sought change, or

           git bisect new [<rev>...]


       to indicate that it was after.

       To get a reminder of the currently used terms, use

           git bisect terms


       You can get just the old (respectively new) term with ggiitt bbiisseecctt tteerrmmss
       ----tteerrmm--oolldd or ggiitt bbiisseecctt tteerrmmss ----tteerrmm--ggoooodd.

       If you would like to use your own terms instead of "bad"/"good" or
       "new"/"old", you can choose any names you like (except existing bisect
       subcommands like rreesseett, ssttaarrtt, ...) by starting the bisection using

           git bisect start --term-old <term-old> --term-new <term-new>


       For example, if you are looking for a commit that introduced a
       performance regression, you might use

           git bisect start --term-old fast --term-new slow


       Or if you are looking for the commit that fixed a bug, you might use

           git bisect start --term-new fixed --term-old broken


       Then, use ggiitt bbiisseecctt <<tteerrmm--oolldd>> and ggiitt bbiisseecctt <<tteerrmm--nneeww>> instead of
       ggiitt bbiisseecctt ggoooodd and ggiitt bbiisseecctt bbaadd to mark commits.

   BBiisseecctt vviissuuaalliizzee//vviieeww
       To see the currently remaining suspects in _g_i_t_k, issue the following
       command during the bisection process (the subcommand vviieeww can be used
       as an alternative to vviissuuaalliizzee):

           $ git bisect visualize


       If the DDIISSPPLLAAYY environment variable is not set, _g_i_t _l_o_g is used
       instead. You can also give command-line options such as --pp and ----ssttaatt.

           $ git bisect visualize --stat


   BBiisseecctt lloogg aanndd bbiisseecctt rreeppllaayy
       After having marked revisions as good or bad, issue the following
       command to show what has been done so far:

           $ git bisect log


       If you discover that you made a mistake in specifying the status of a
       revision, you can save the output of this command to a file, edit it to
       remove the incorrect entries, and then issue the following commands to
       return to a corrected state:

           $ git bisect reset
           $ git bisect replay that-file


   AAvvooiiddiinngg tteessttiinngg aa ccoommmmiitt
       If, in the middle of a bisect session, you know that the suggested
       revision is not a good one to test (e.g. it fails to build and you know
       that the failure does not have anything to do with the bug you are
       chasing), you can manually select a nearby commit and test that one
       instead.

       For example:

           $ git bisect good/bad                   # previous round was good or bad.
           Bisecting: 337 revisions left to test after this (roughly 9 steps)
           $ git bisect visualize                  # oops, that is uninteresting.
           $ git reset --hard HEAD~3               # try 3 revisions before what
                                                   # was suggested


       Then compile and test the chosen revision, and afterwards mark the
       revision as good or bad in the usual manner.

   BBiisseecctt sskkiipp
       Instead of choosing a nearby commit by yourself, you can ask Git to do
       it for you by issuing the command:

           $ git bisect skip                 # Current version cannot be tested


       However, if you skip a commit adjacent to the one you are looking for,
       Git will be unable to tell exactly which of those commits was the first
       bad one.

       You can also skip a range of commits, instead of just one commit, using
       range notation. For example:

           $ git bisect skip v2.5..v2.6


       This tells the bisect process that no commit after vv22..55, up to and
       including vv22..66, should be tested.

       Note that if you also want to skip the first commit of the range you
       would issue the command:

           $ git bisect skip v2.5 v2.5..v2.6


       This tells the bisect process that the commits between vv22..55 and vv22..66
       (inclusive) should be skipped.

   CCuuttttiinngg ddoowwnn bbiisseeccttiioonn bbyy ggiivviinngg mmoorree ppaarraammeetteerrss ttoo bbiisseecctt ssttaarrtt
       You can further cut down the number of trials, if you know what part of
       the tree is involved in the problem you are tracking down, by
       specifying path parameters when issuing the bbiisseecctt ssttaarrtt command:

           $ git bisect start -- arch/i386 include/asm-i386


       If you know beforehand more than one good commit, you can narrow the
       bisect space down by specifying all of the good commits immediately
       after the bad commit when issuing the bbiisseecctt ssttaarrtt command:

           $ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --
                              # v2.6.20-rc6 is bad
                              # v2.6.20-rc4 and v2.6.20-rc1 are good


   BBiisseecctt rruunn
       If you have a script that can tell if the current source code is good
       or bad, you can bisect by issuing the command:

           $ git bisect run my_script arguments


       Note that the script (mmyy__ssccrriipptt in the above example) should exit with
       code 0 if the current source code is good/old, and exit with a code
       between 1 and 127 (inclusive), except 125, if the current source code
       is bad/new.

       Any other exit code will abort the bisect process. It should be noted
       that a program that terminates via eexxiitt((--11)) leaves $? = 255, (see the
       exit(3) manual page), as the value is chopped with && 00337777.

       The special exit code 125 should be used when the current source code
       cannot be tested. If the script exits with this code, the current
       revision will be skipped (see ggiitt bbiisseecctt sskkiipp above). 125 was chosen as
       the highest sensible value to use for this purpose, because 126 and 127
       are used by POSIX shells to signal specific error status (127 is for
       command not found, 126 is for command found but not executable--these
       details do not matter, as they are normal errors in the script, as far
       as bbiisseecctt rruunn is concerned).

       You may often find that during a bisect session you want to have
       temporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a
       header file, or "revision that does not have this commit needs this
       patch applied to work around another problem this bisection is not
       interested in") applied to the revision being tested.

       To cope with such a situation, after the inner _g_i_t _b_i_s_e_c_t finds the
       next revision to test, the script can apply the patch before compiling,
       run the real test, and afterwards decide if the revision (possibly with
       the needed patch) passed the test and then rewind the tree to the
       pristine state. Finally the script should exit with the status of the
       real test to let the ggiitt bbiisseecctt rruunn command loop determine the eventual
       outcome of the bisect session.

OOPPTTIIOONNSS
       --no-checkout
           Do not checkout the new working tree at each iteration of the
           bisection process. Instead just update a special reference named
           BBIISSEECCTT__HHEEAADD to make it point to the commit that should be tested.

           This option may be useful when the test you would perform in each
           step does not require a checked out tree.

           If the repository is bare, ----nnoo--cchheecckkoouutt is assumed.

EEXXAAMMPPLLEESS
       +o   Automatically bisect a broken build between v1.2 and HEAD:

               $ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good
               $ git bisect run make                # "make" builds the app
               $ git bisect reset                   # quit the bisect session


       +o   Automatically bisect a test failure between origin and HEAD:

               $ git bisect start HEAD origin --    # HEAD is bad, origin is good
               $ git bisect run make test           # "make test" builds and tests
               $ git bisect reset                   # quit the bisect session


       +o   Automatically bisect a broken test case:

               $ cat ~/test.sh
               #!/bin/sh
               make || exit 125                     # this skips broken builds
               ~/check_test_case.sh                 # does the test case pass?
               $ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
               $ git bisect run ~/test.sh
               $ git bisect reset                   # quit the bisect session

           Here we use a tteesstt..sshh custom script. In this script, if mmaakkee fails,
           we skip the current commit.  cchheecckk__tteesstt__ccaassee..sshh should eexxiitt 00 if
           the test case passes, and eexxiitt 11 otherwise.

           It is safer if both tteesstt..sshh and cchheecckk__tteesstt__ccaassee..sshh are outside the
           repository to prevent interactions between the bisect, make and
           test processes and the scripts.

       +o   Automatically bisect with temporary modifications (hot-fix):

               $ cat ~/test.sh
               #!/bin/sh

               # tweak the working tree by merging the hot-fix branch
               # and then attempt a build
               if      git merge --no-commit hot-fix &&
                       make
               then
                       # run project specific test and report its status
                       ~/check_test_case.sh
                       status=$?
               else
                       # tell the caller this is untestable
                       status=125
               fi

               # undo the tweak to allow clean flipping to the next commit
               git reset --hard

               # return control
               exit $status

           This applies modifications from a hot-fix branch before each test
           run, e.g. in case your build or test environment changed so that
           older revisions may need a fix which newer ones have already. (Make
           sure the hot-fix branch is based off a commit which is contained in
           all revisions which you are bisecting, so that the merge does not
           pull in too much, or use ggiitt cchheerrrryy--ppiicckk instead of ggiitt mmeerrggee.)

       +o   Automatically bisect a broken test case:

               $ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
               $ git bisect run sh -c "make || exit 125; ~/check_test_case.sh"
               $ git bisect reset                   # quit the bisect session

           This shows that you can do without a run script if you write the
           test on a single line.

       +o   Locate a good region of the object graph in a damaged repository

               $ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] --no-checkout
               $ git bisect run sh -c '
                       GOOD=$(git for-each-ref "--format=%(objectname)" refs/bisect/good-*) &&
                       git rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&
                       git pack-objects --stdout >/dev/null <tmp.$$
                       rc=$?
                       rm -f tmp.$$
                       test $rc = 0'

               $ git bisect reset                   # quit the bisect session

           In this case, when _g_i_t _b_i_s_e_c_t _r_u_n finishes, bisect/bad will refer
           to a commit that has at least one parent whose reachable graph is
           fully traversable in the sense required by _g_i_t _p_a_c_k _o_b_j_e_c_t_s.

       +o   Look for a fix instead of a regression in the code

               $ git bisect start
               $ git bisect new HEAD    # current commit is marked as new
               $ git bisect old HEAD~10 # the tenth commit from now is marked as old

           or:

           $ git bisect start --term-old broken --term-new fixed
           $ git bisect fixed
           $ git bisect broken HEAD~10


   GGeettttiinngg hheellpp
       Use ggiitt bbiisseecctt to get a short usage description, and ggiitt bbiisseecctt hheellpp or
       ggiitt bbiisseecctt --hh to get a long usage description.

SSEEEE AALLSSOO
       FFiigghhttiinngg rreeggrreessssiioonnss wwiitthh ggiitt bbiisseecctt[1], ggiitt--bbllaammee(1).

GGIITT
       Part of the ggiitt(1) suite

NNOOTTEESS
        1. Fighting regressions with git bisect
           git-htmldocs/git-bisect-lk2009.html



Git 2.24.0                        11/04/2019                     GIT-BISECT(1)
